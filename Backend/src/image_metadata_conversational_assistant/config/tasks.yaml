---
extract_metadata:
  description: Upon receiving the uploaded {image_file}, MetadataExtractionAgent extracts
    all relevant EXIF/IPTC metadata including timestamp, GPS, camera make/model, ISO,
    aperture, shutter-speed, and focal length.
  expected_output: A raw JSON object containing all extracted metadata for {image_file}.
  async_execution: false
  agent: MetadataExtractionAgent
cache_session_metadata:
  description: Store the extracted metadata from {image_file} into the session store
    associated with {session_id} using MetadataCacheAgent, ensuring it is available
    for follow-up queries.
  expected_output: Confirmation that metadata has been cached successfully for session
    {session_id}.
  async_execution: false
  agent: MetadataCacheAgent
  context:
  - extract_metadata
normalize_prompt:
  description: Process the incoming user query {user_question} with PromptEnrichmentAgent
    to normalize ambiguous references (e.g. converting 'this image' into its corresponding
    image ID).
  expected_output: A normalized query with all ambiguous terms replaced by explicit
    identifiers.
  async_execution: false
  agent: PromptEnrichmentAgent
  context:
  - cache_session_metadata
filter_statistics:
  description: For queries related to filtering (e.g. 'How many of my photos were
    shot at 1/60 s?') or common settings analysis (e.g. 'What camera settings should
    I use?'), FilterAndStatsAgent processes the cached metadata from {session_id}
    to compute the required statistics.
  expected_output: A formatted summary that includes counts and statistical insights
    based on the metadata.
  async_execution: false
  agent: FilterAndStatsAgent
  context:
  - normalize_prompt
compare_metadata:
  description: For queries requesting comparisons (e.g. 'Compare the lighting in this
    photo to the first one I uploaded'), ComparisonAgent performs pairwise comparisons
    of metadata (ISO, aperture, shutter-speed) between the referenced images.
  expected_output: A detailed comparison highlighting differences in exposure and
    camera settings between the selected images.
  async_execution: false
  agent: ComparisonAgent
  context:
  - normalize_prompt
reverse_geocode_location:
  description: Extract GPS data from the cached metadata of {image_file} for session
    {session_id} and use ReverseGeocodingAgent to obtain a human-friendly location
    name.
  expected_output: A location string (e.g. 'Eiffel Tower, Paris') produced from the
    GPS coordinates.
  async_execution: false
  agent: ReverseGeocodingAgent
  context:
  - cache_session_metadata
enrich_named_place:
  description: Take the human-friendly location obtained by ReverseGeocodingAgent
    and use NamedPlaceEnrichmentAgent to fetch a concise summary or Wikipedia snippet
    about the location for queries like 'Tell me a little about this monument.'
  expected_output: A short enrichment text providing historical or descriptive details
    about the location.
  async_execution: false
  agent: NamedPlaceEnrichmentAgent
  context:
  - reverse_geocode_location
lookup_weather:
  description: Utilize the timestamp and GPS from the image's metadata in {session_id},
    and use WeatherDataAgent with {weather_api_key} to retrieve weather conditions
    (temperature, cloud cover, rainfall, etc.) at the time the image was taken.
  expected_output: A detailed weather report linked to the imageâ€™s metadata.
  async_execution: false
  agent: WeatherDataAgent
  context:
  - cache_session_metadata
export_csv:
  description: When requested, CSVExportAgent serializes all metadata cached under
    {session_id} into CSV format and provides a secure download link.
  expected_output: A CSV file download link containing metadata for all images in
    session {session_id}.
  async_execution: false
  agent: CSVExportAgent
  context:
  - cache_session_metadata
assemble_response:
  description: Collect outputs from FilterAndStatsAgent, ComparisonAgent, ReverseGeocodingAgent,
    NamedPlaceEnrichmentAgent, WeatherDataAgent, CSVExportAgent, and DuplicateDetectionAgent.
    Pass them to CriticAgent for validation and let OrchestrationManager integrate
    these results using groq LLM with {groq_api_key} to compile the final response
    for {user_question}.
  expected_output: A coherent final response that integrates all processed metadata
    insights, enrichment details, duplicate detection results, and any other relevant
    information.
  async_execution: false
  agent: OrchestrationManager
  context:
  - filter_statistics
  - compare_metadata
  - enrich_named_place
  - lookup_weather
  - export_csv
  - detect_duplicates
handle_fallback:
  description: For queries that fall outside the scope of metadata analysis (e.g.
    'Tell me a joke' or 'Convert this photo to color'), FallBackAgent provides a graceful,
    predefined response.
  expected_output: A clear message informing the user of the scope limitations and
    offering assistance with available metadata-based queries.
  async_execution: false
  agent: FallBackAgent
  context:
  - normalize_prompt
